package demo

import (
	"bufio"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strconv"
	"strings"

	"github.com/spf13/cobra"
)

var demoJson = `{"widget": {
    "debug": "on",
    "window": {
        "title": "Sample Konfabulator Widget",
        "name": "main_window",
        "width": 500,
        "height": 500
    },
    "image": { 
        "src": "Images/Sun.png",
        "name": "sun1",
        "hOffset": 250,
        "vOffset": 250,
        "alignment": "center"
    },
    "text": {
        "data": "Click Here",
        "size": 36,
        "style": "bold",
        "name": "text1",
        "hOffset": 250,
        "vOffset": 100,
        "alignment": "center",
        "onMouseUp": "sun1.opacity = (sun1.opacity / 100) * 90;"
    }
}}`

type AutoGenerated struct {
	Widget struct {
		Debug  string `json:"debug"`
		Window struct {
			Title  string `json:"title"`
			Name   string `json:"name"`
			Width  int    `json:"width"`
			Height int    `json:"height"`
		} `json:"window"`
		Image struct {
			Src       string `json:"src"`
			Name      string `json:"name"`
			HOffset   int    `json:"hOffset"`
			VOffset   int    `json:"vOffset"`
			Alignment string `json:"alignment"`
		} `json:"image"`
		Text struct {
			Data      string `json:"data"`
			Size      int    `json:"size"`
			Style     string `json:"style"`
			Name      string `json:"name"`
			HOffset   int    `json:"hOffset"`
			VOffset   int    `json:"vOffset"`
			Alignment string `json:"alignment"`
			OnMouseUp string `json:"onMouseUp,omitempty"`
		} `json:"text"`
	} `json:"widget"`
}

var DemoCmd = &cobra.Command{
	Use:   "demo",
	Short: "",
}

var testCodeCmd = &cobra.Command{
	Use:   "test-code",
	Short: "Test Code",
	Run: func(cmd *cobra.Command, args []string) {
		// readFromFile()
		// unmarshalJson()
		// unmarshalJsonFile()
		// marshalJson()
		// splitString()
		splitString2()
		// stringToInt()
	},
}

func init() {
	DemoCmd.AddCommand(testCodeCmd)
}

func unmarshalJson() {
	j := AutoGenerated{}
	if err := json.Unmarshal([]byte(demoJson), &j); err != nil {
		log.Fatal(err)
	}

	fmt.Println(j.Widget.Window.Name)
	fmt.Println(j.Widget.Image.Name)
}

func unmarshalJsonFile() {
	b, err := os.ReadFile("cmd/demo/file1.json")
	if err != nil {
		log.Fatal(err)
	}

	j := AutoGenerated{}
	if err := json.Unmarshal(b, &j); err != nil {
		log.Fatal(err)
	}

	fmt.Println(j.Widget.Window.Name)
	fmt.Println(j.Widget.Image.Name)
	fmt.Println(j.Widget.Image.Alignment)

	fmt.Println(string(b))
}

func marshalJson() {
	j := AutoGenerated{}
	j.Widget.Window.Name = "Test1"
	j.Widget.Debug = "false"
	j.Widget.Image.Name = "Test2"
	j.Widget.Window.Width = 30
	j.Widget.Window.Height = 40

	b, err := json.Marshal(j)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(b))

	b2, err := json.MarshalIndent(j, "", "  ")
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println(string(b2))
}

func readFromFile() {
	file, err := os.Open("cmd/demo/file1.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	lineNum := 1
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		t := scanner.Text()
		if t != "" {
			fmt.Printf("line %v: %s\n", lineNum, t)
			lineNum++
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
}

func splitString() {
	file, err := os.Open("cmd/demo/file2.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	lineNum := 1
	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		t := scanner.Text()
		data := strings.Split(t, " ")
		if t != "" {
			if len(data) < 2 {
				fmt.Printf("line %v: %s\n", lineNum, data[0])
			} else {
				fmt.Printf("line %v: %s (%s)\n", lineNum, data[0], data[1])
			}
			lineNum++
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
}

func splitString2() {
	file, err := os.Open("cmd/demo/file2.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		t := scanner.Text()
		data := strings.Split(t, " ")
		if t != "" {
			if data[0] == "addx" {
				if len(data) == 2 {
					fmt.Println(data[1])
				}
			}
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
}

func stringToInt() {
	// b, err := strconv.ParseBool("true")
	// f, err := strconv.ParseFloat("3.1415", 64)
	// i, err := strconv.ParseInt("-42", 10, 64)
	// u, err := strconv.ParseUint("42", 10, 64)

	file, err := os.Open("cmd/demo/file2.txt")
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		t := scanner.Text()
		data := strings.Split(t, " ")
		if t != "" {
			if len(data) == 2 {
				// i, err := strconv.Atoi(data[1])
				i, err := strconv.ParseInt(data[1], 10, 64)
				if err != nil {
					log.Fatal(err)
				}

				if i < 0 {
					fmt.Println(i)
				}
			}
		}
	}

	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
}
